/*
* Centers element by type
*/
@mixin center($type: flex) {
	@if $type=='flex' {
		display: flex;
		align-items: center;
		justify-content: center;
	}

	@else if $type=='margin' {
		margin: 0 auto;
	}

	@else {
		position: absolute;
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
	}
}


/*
* Sets element media query
*/
@mixin media($breakpoint, $type: max) {
	@media screen and (#{$type}-width: #{$breakpoint}) {
		@content;
	}
}

/*
* Includes background path from dist folder and sets its properties
*/
@mixin bg($file, $size: false, $pos: false, $repeat: true) {
	background-image: url('../../dist/img/#{$file}');

	@if $repeat==true {
		background-repeat: no-repeat;
	}

	@if $size {
		background-size: $size;
	}

	@if $pos {
		background-position: $pos;
	}
}

/*
* Flexbox row system
* example: flex('start','space');
* output: display:flex; flex-wrap:wrap; align-items:start; justify-content: space-between;
* example: flex('start','space', 20px);
* output: display:flex; flex-wrap:wrap; align-items:start; justify-content: space-between; margin-left: -20px; margin-right: -20px;
*/
@mixin flex($align:'start', $space:'start', $gutter: 'false', $column: 'false') {
	display: flex;
	flex-wrap: wrap;

	@if $gutter !='false' {
		margin-left: -#{$gutter};
		margin-right: -#{$gutter};
	}

	@if $column !='false' {
		flex-direction: column
	}

	@if $align=='center' {
		align-items: center;
	}

	@if $align=='start' {
		align-items: flex-start;
	}

	@if $align=='end' {
		align-items: flex-end;
	}

	@if $align=='strech' {
		align-items: stretch;
	}

	@if $space=='center' {
		justify-content: center;
	}

	@if $space=='space' {
		justify-content: space-between;
	}

	@if $space=='end' {
		justify-content: flex-end;
	}
}

/*
* Column width system
* example: @TODO
*/
@mixin col($items: 'false', $margin: 'false', $mobilefw: 'false') {
	width: 100%;

	@if $items !='false' {
		@if $margin=='false' {
			max-width: calc(8.3333333% * #{$items});
		}
	}

	@if $margin !='false' {
		margin: 0 $margin $margin;
		$wat: #{$items} - #{$margin} * 2;
		max-width: calc(8.3333333% * #{$items} - #{$margin} * 2);
		&:last-child:not(:only-child) {
			margin-bottom: 0;
		}
	}

	@if $mobilefw !='false' {
		@include media(#{$mobilefw}) {
			max-width: 100%;
			margin-left: 0;
			margin-right: 0;
		}
	}
}.lol {
	@include col(6, 20px);
}

/*
* Styles input placeholder
* This is getting prefixed by gulp
*/
@mixin input-placeholder {
	&::placeholder {
		@content;
	}
}

/*
* Fills relative parent width and height
*/
@mixin cover {
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	display: block;
}

/*
* Includes pseudo element if param is true
* Wrapper for @cover
*/
@mixin fw($after: false) {
	@if $after {
		&::after {
			content: '';
			@include cover();
		}
	}

	@else {
		@include cover();
	}
}


/*
* Sets item width and height 
*/
@mixin box($width, $height:$width) {
	width: $width;
	height: $height;
}

/*
* Includes animation with params
*/
@mixin keyframes($name, $params) {
	animation: #{$name} #{$params};

	@keyframes #{$name} {
		@content;
	}
}

/*
* Keeps item aspect ratio
* Item height is based on padding-top
*/
@mixin ratio($x, $y) {
	$padding: unquote(($y / $x) * 100 + '%');
	padding-top: $padding;
}

/*
* Px to vw calculator
* Remember to define your laytout width in _app.scss
*/
@function vw($px) {
	$vw: ($projectWidth * 0.01) * 1px;
	@return ($px / $vw) * 1vw;
}